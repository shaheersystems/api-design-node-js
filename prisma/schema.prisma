// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  createdAt   DateTime      @default(now())
  username    String        @unique
  password    String
  updates     Update[]
  Product     Product[]
  APIRequests ApiRequests[]
  APIKey      ApiKey[]
  BlockedIP   Ip[]
}

model Product {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  name        String
  belongsTo   User     @relation(fields: [belongsToId], references: [id])
  belongsToId String
  updates     Update[]
}

enum UPDATE_STATUS {
  IN_PROGRESS
  LIVE
  DEPRECATED
  ARCHIVED
}

model Update {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime

  title   String        @db.VarChar(255)
  body    String
  status  UPDATE_STATUS @default(IN_PROGRESS)
  version String?
  asset   String

  productId    String
  product      Product       @relation(fields: [productId], references: [id])
  updatePoints UpdatePoint[]
  User         User?         @relation(fields: [userId], references: [id])
  userId       String?
}

model UpdatePoint {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime

  name        String @db.VarChar(255)
  description String

  updateId String
  update   Update @relation(fields: [updateId], references: [id])
}

// Models for analytics

model ApiRequests {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  ip        String
  path      String
  method    String
  status    Int
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
}

model ApiKey {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  name        String
  description String
  key         String   @unique
  User        User     @relation(fields: [userId], references: [id])
  userId      String
}

model Ip {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  ip        String   @unique
  reason    String?
  blocked   Boolean
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}
